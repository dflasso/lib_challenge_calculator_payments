variables:
  PIP_CACHE_DIR: "$CI_PROJECT_DIR/.cache/pip"
  SONAR_USER_HOME: "${CI_PROJECT_DIR}/.sonar"  # Defines the location of the analysis task cache
  GIT_DEPTH: "0"  # Tells git to fetch all the branches of the project, required by the analysis task

cache:
  paths:
    - .cache/pip
    - venv/

stages:
- test
- deploy

deploy package:
  stage: deploy
  image: python:3.9.13-slim-buster
  variables: 
    TWINE_PASSWORD: ${CI_JOB_TOKEN}
    TWINE_USERNAME: ${GITLAB_USER_NAME}
  before_script:
    - python3.9  -m venv .env
    - source .env/bin/activate
    - pip3 install -r requirements.txt
  script:
    - pip install twine
    - python setup.py sdist bdist_wheel
    - python3.9 -m twine upload --repository-url ${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/packages/pypi dist/*        
  only:
    - merge_requests
  
# unit test:
#   stage: test
#   image: python:3.9.13-slim-buster
#   before_script:
#     - python3.9  -m venv .env
#     - source .env/bin/activate
#     - pip3 install -r requirements.txt
#   script:
#     -  nosetests -v --with-xunit --xunit-file=report.xml        
#   artifacts:
#     when: always
#     reports:
#       junit: report.xml
#     expire_in: 2 weeks
#   only:
#     - merge_requests
  
# test coverage:
#   stage: test
#   image: python:3.9.13-slim-buster
#   before_script:
#     - python3.9  -m venv .env
#     - source .env/bin/activate
#     - pip3 install -r requirements.txt
#   script:
#     - pip install pytest pytest-cov
#     - coverage run -m pytest
#     - coverage report
#     - coverage xml
#   coverage: '/(?i)total.*? (100(?:\.0+)?\%|[1-9]?\d(?:\.\d+)?\%)$/'
#   artifacts:    
#     paths: [coverage.xml]
#     reports:
#       coverage_report:
#         coverage_format: cobertura
#         path: coverage.xml
#   only:
#     - merge_requests

# sast:
#   stage: test
#   variables:
#     SAST_BANDIT_EXCLUDED_PATHS: '*/tests/*, */venv/*'
#   artifacts:    
#     paths: [gl-sast-report.json]
#     reports:
#       sast: gl-sast-report.json

# code_quality:
#   image: docker:19.03.11
#   artifacts:
#     paths: [gl-code-quality-report.html]
#     reports:
#       codequality: gl-code-quality-report.json
#   rules:
#     - if: $CI_PIPELINE_SOURCE == "merge_request_event" # Run job1 in merge request pipelines
#     - if: $CI_COMMIT_BRANCH == "main"                  # Run job1 in pipelines on the main branch (but not in other branch pipelines)
#     - if: $CI_COMMIT_TAG 

# sonarcloud-check:
#   stage: test
#   image:
#     name: sonarsource/sonar-scanner-cli:4
#     entrypoint: [""]
#   cache:
#     key: "${CI_JOB_NAME}"
#     paths:
#       - .sonar/cache
#   script:
#     - sonar-scanner
#   only:
#     - merge_requests
#   needs: ['test coverage', 'unit test' ]

# include:
# - template: Security/SAST.gitlab-ci.yml
# - template: Code-Quality.gitlab-ci.yml
